@page "/user/update/{UserId:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<button class="btn btn-primary" @onclick="BackToMenu">Back</button>

<h3>Update User</h3>
<EditForm Model="User" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="control-label">First Name</label>
        <InputText @bind-Value="User.UserFirstName" class="form-control"></InputText>
        <ValidationMessage For="@(() => User.UserFirstName)" />
    </div>

    <div class="form-group">
        <label class="control-label">Last Name</label>
        <InputText @bind-Value="User.UserLastName" class="form-control"></InputText>
        <ValidationMessage For="@(() => User.UserLastName)" />
    </div>

    <div class="form-group">
        <label class="control-label">Email</label>
        <InputText @bind-Value="User.UserEmail" class="form-control"></InputText>
        <ValidationMessage For="@(() => User.UserEmail)" />
    </div>

    <div class="form-group">
        <label class="control-label">Mobile</label>
        <InputText @bind-Value="User.UserMobile" class="form-control"></InputText>
        <ValidationMessage For="@(() => User.UserMobile)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public Guid UserId { get; set; }
    private User User { get; set; } = new User();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = await Http.GetFromJsonAsync<User>($"/api/Users/{UserId}");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Users/{User.UserId}", User);
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/user");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public void BackToMenu()
    {
        Navigation.NavigateTo("/user");
    }
}
